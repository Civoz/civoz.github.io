<html>
<head>
  <title>HttpClient</title>
  <basefont face="微软雅黑" size="2" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <meta name="exporter-version" content="Evernote Windows/275519; Windows/6.2.9200;"/>
  <style>
    body, td {
      font-family: 微软雅黑;
      font-size: 10pt;
    }
  </style>
</head>
<body>
<a name="2530"/>

<div>
<span bgcolor="#FFFFFF" style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"><div><div><br/><table bgcolor="#D4DDE5" border="0" width="100%"><tbody><tr><td><h1>HttpClient 4.3教程</h1></td></tr></tbody></table></div><div style="font-size: 16px"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: Arial, sans-serif; font-size: 15px; font-style: normal; outline: 0px; vertical-align: baseline; line-height: 1.575; background-color: rgb(249, 249, 249); color: rgb(55, 55, 55); font-variant: normal;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; overflow: hidden;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="-webkit-box-shadow: rgb(187, 187, 187) 0px 0px 5px; box-shadow: rgb(187, 187, 187) 0px 0px 5px; background-color: rgb(252, 252, 252);"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; word-wrap: break-word;"><div><br/></div><div>httpclient发布了4.3版，改动比较大，之前常用的一些类和方法已经不推荐使用了，在这里对httpclient4.3.1的官方英文文档进行翻译，希望可以坚持到最后。目录如下：</div><div><br/></div><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><a href="#preface" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">前言</a></h2><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#definition" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">I.&nbsp; HttpClient的定义</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#canot" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">II. HttpClient不能做的事情</a></li></ul><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><a href="#Fundamentals" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1. 基本概念<br/></a></h2><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Request-execution" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1. 请求执行</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-request" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.1. HTTP请求</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-response" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.2. HTTP响应</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Working-with-message-headers" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.3. 消息头</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-entity" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.4. HTTP实体</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Repeatable-entities" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.4.1. 可重复的实体</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Using-HTTP-entities" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.4.2. 使用HTTP实体</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Ensuring-release-of-low-level-resources" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.5. 确保底层的资源连接被释放</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Consuming-entity-content" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.6. 消耗HTTP实体内容</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Producing-entity-content" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.7. 创建HTTP实体内容</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTML-forms" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.7.1. HTML表单</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Content-chunking" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.7.2. 内容分块</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Response-handlers" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.1.8. Response handlers</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HttpClient-interface" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.2. HttpClient接口</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HttpClient-thread-safety" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.2.1. HttpClient的线程安全性</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HttpClient-resource-deallocation" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.2.2. HttpClient的内存分配</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-execution-context" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.3. HTTP执行上下文</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Exception-handling" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.4. 异常处理</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-transport-safety" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.4.1. HTTP传输安全</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Idempotent-methods" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.4.2. 方法的幂等性</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Automatic-exception-recovery" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.4.3. 异常自动修复</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Request-retry-handler" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.4.4. 请求重试handler</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Aborting-requests" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.5. 终止请求</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-protocol-interceptors" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.6. HTTP协议拦截器</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Redirect-handling" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">1.7. 重定向处理</a></li></ul><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><a href="#connection-manage" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2. 连接管理</a></h2><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#connection-persistence" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.1. 持久连接</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-connection-routing" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.2. HTTP连接路由</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Route-computation" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.2.1. 路由计算</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Secure-HTTP-connections" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.2.2. 安全的HTTP连接</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-connection-managers" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.3. HTTP连接管理器</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Managed-connections-and-connection-managers" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.3.1. 管理连接和连接管理器</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Simple-connection-manager" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.3.2. 简单连接管理器</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Pooling-connection-manager" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.3.3. .连接池管理器</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Connection-manager-shutdown" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.3.4. 关闭连接管理器</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Multithreaded-request-execution" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.4. 多线程请求执行</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Connection-eviction-policy" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.5. 连接回收策略</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Connection-keep-alive-strategy" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.6. 连接存活策略</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Connection-socket-factories" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.7. socket连接工厂</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Secure-socket-layering" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.7.1. 安全SOCKET分层</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Integration-with-connection-manager" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.7.2. 集成连接管理器</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#SSL-TLS-customization" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.7.3. SSL/TLS定制</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Hostname-verification" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.7.4. 域名验证</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HttpClient-proxy-configuration" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">2.8. HttpClient代理服务器配置</a></li></ul><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><a href="#HTTP-status-manage" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">3. HTTP状态管理</a></h2><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-cookies" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">3.1. HTTP cookies</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Cookie-versions" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">3.1.1. Cookie versions</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Cookie-specifications" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">3.2. Cookie规范</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Choosing-cookie-policy" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">3.3. 选择Cookie策略</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Custom-cookie-policy" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">3.4. 自定义Cookie策略</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Cookie-persistence" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">3.5. Cookie持久化</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-state-management-and-execution-context" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">3.6. HTTP状态管理和执行上下文</a></li></ul><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><a href="#HTTP-authentication" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.HTTP认证</a></h2><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#User-credentials" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.1. 用户凭证</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Authentication-schemes" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.2. 认证方案</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Credentials-provider" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.3. 凭证 provider</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#HTTP-authentication-and-execution-context" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.4. HTTP授权和执行上下文</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Caching-of-authentication-data" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.5. 缓存认证数据</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Preemptive-authentication" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.6. 抢先认证</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#NTLM-Authentication" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.7. NTLM认证</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#NTLM-connection-persistence" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.7.1. NTLM连接持久性</a></li></ul></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#SPNEGO-Kerberos-Authentication" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.8. SPNEGO/Kerberos认证</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#SPNEGO-support-in-HttpClient" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.8.1. 在HTTPCIENT中使用SPNEGO</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#GSS-Java-Kerberos-Setup" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.8.2. 使用GSS/JAVA KERBEROS</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#login.conf-file" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.8.3. login.conf文件</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#krb5.conf-krb5.ini-file" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.8.4. KRB5.CONF / KRB5.INI 文件</a></li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Windows-Specific-configuration" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">4.8.5. WINDOWS详细的配置</a></li></ul></li></ul><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><a href="#Easy-api" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">5. 快速API</a></h2><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Easy-to-use-facade-API" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">5.1. Easy to use facade API</a><ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><a href="#Response-handling" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">5.1.1. 响应处理</a></li></ul></li></ul><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">6. HTTP Caching</h2><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">6.1. General Concepts
6.2. RFC-2616 Compliance
6.3. Example Usage
6.4. Configuration
6.5. Storage Backends
</code></pre><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">7. Advanced topics</h2><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">7.1. Custom client connections
7.2. Stateful HTTP connections

    7.2.1. User token handler
    7.2.2. Persistent stateful connections

7.3. Using the FutureRequestExecutionService

    7.3.1. Creating the FutureRequestExecutionService
    7.3.2. Scheduling requests
    7.3.3. Canceling tasks
    7.3.4. Callbacks
    7.3.5. Metrics
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><br/></p></div></div></div></div></div></div></div></div></div><div><table bgcolor="#D4DDE5" border="0" width="100%"><tbody><tr><td><h1 id="preface">HttpClient 4.3教程 前言</h1></td></tr></tbody></table></div><div style="font-size: 16px"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: Arial, sans-serif; font-size: 15px; font-style: normal; outline: 0px; vertical-align: baseline; line-height: 1.575; background-color: rgb(249, 249, 249); color: rgb(55, 55, 55); font-variant: normal;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; overflow: hidden;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="-webkit-box-shadow: rgb(187, 187, 187) 0px 0px 5px; box-shadow: rgb(187, 187, 187) 0px 0px 5px; background-color: rgb(252, 252, 252);"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; word-wrap: break-word;"><h1 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><br/></h1><h1 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">前言</h1><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Http协议应该是互联网中最重要的协议。持续增长的web服务、可联网的家用电器等都在继承并拓展着Http协议，向着浏览器之外的方向发展。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">虽然jdk中的java.net包中提供了一些基本的方法，通过http协议来访问网络资源，但是大多数场景下，它都不够灵活和强大。HttpClient致力于填补这个空白，它可以提供有效的、最新的、功能丰富的包来实现http客户端。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">为了拓展，HttpClient即支持基本的http协议，还支持http-aware客户端程序，如web浏览器，网络服务客户端，或者用于平、拓展http协议的分布式系统。</p><ol style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: decimal;"><li id="definition" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">HttpClient的定义
<ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">是一个基于HttpCore的客户端Http传输类库</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">基于传统的（阻塞）IO</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">内容无关</li></ul></li><li id="canot" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">HttpClient不能做的事情
<ul style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px 0px 1.625em 2.5em;outline:0px;padding:0px;vertical-align:baseline;list-style:none url(http://www.yeetrack.com/wp-content/themes/admired/images/bullets/circle-black.gif);margin-bottom:0px;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">HttpClient不是浏览器，它是一个客户端http协议传输类库。HttpClient被用来发送和接受Http消息。HttpClient不会处理http消息的内容，不会进行javascript解析，不会关心content type，如果没有明确设置，httpclient也不会对请求进行格式化、重定向url，或者其他任何和http消息传输相关的功能。</li></ul></li></ol><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><br/></p></div></div></div></div></div></div></div></div></div><div><table bgcolor="#D4DDE5" border="0" width="100%"><tbody><tr><td><h1 id="Fundamentals">HttpClient 4.3教程 第一章.基本概念</h1></td></tr></tbody></table></div><div style="font-size: 16px"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: Arial, sans-serif; font-size: 15px; font-style: normal; outline: 0px; vertical-align: baseline; line-height: 1.575; background-color: rgb(249, 249, 249); color: rgb(55, 55, 55); font-variant: normal;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; overflow: hidden;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="-webkit-box-shadow: rgb(187, 187, 187) 0px 0px 5px; box-shadow: rgb(187, 187, 187) 0px 0px 5px; background-color: rgb(252, 252, 252);"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; word-wrap: break-word;"><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><br/></h2><h2 id="Request-execution" style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">1.1. 请求执行</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient最基本的功能就是执行Http方法。一个Http方法的执行涉及到一个或者多个Http请求/Http响应的交互，通常这个过程都会自动被HttpClient处理，对用户透明。用户只需要提供Http请求对象，HttpClient就会将http请求发送给目标服务器，并且接收服务器的响应，如果http请求执行不成功，httpclient就会抛出异样。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面是个很简单的http请求执行的例子：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = HttpClients.createDefault();
    HttpGet httpget = new HttpGet(&quot;http://www.civoz.com/&quot;);
    CloseableHttpResponse response = httpclient.execute(httpget);
    try {
        &lt;...&gt;
    } finally {
        response.close();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-request" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.1.1. Http请求</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">所有的Http请求都有一个请求列（request line），包括方法名、请求的URI和Http版本号。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient支持HTTP/1.1这个版本定义的所有Http方法：<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">GET</code>,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HEAD</code>,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">POST</code>,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">PUT</code>,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">DELETE</code>,’TRACE<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">和</code>OPTIONS<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">。对于每一种http方法，HttpClient都定义了一个相应的类：</code>HttpGet<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">,</code>HttpHead<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">,</code>HttpPost<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">,</code>HttpPut<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">,</code>HttpDelete<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">,</code>HttpTrace<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">和</code>HttpOpquertions`。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Request-URI即统一资源定位符，用来标明Http请求中的资源。Http request URIS包含协议名、主机名、主机端口（可选）、资源路径、query（可选）和片段信息（可选）。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpGet httpget = new HttpGet(
 &quot;http://www.google.com/search?hl=en&amp;q=httpclient&amp;btnG=Google+Search&amp;aq=f&amp;oq=&quot;);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient提供<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">URIBuilder</code>工具类来简化URIs的创建和修改过程。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    URI uri = new URIBuilder()
    .setScheme(&quot;http&quot;)
    .setHost(&quot;www.google.com&quot;)
    .setPath(&quot;/search&quot;)
    .setParameter(&quot;q&quot;, &quot;httpclient&quot;)
    .setParameter(&quot;btnG&quot;, &quot;Google Search&quot;)
    .setParameter(&quot;aq&quot;, &quot;f&quot;)
    .setParameter(&quot;oq&quot;, &quot;&quot;)
    .build();
    HttpGet httpget = new HttpGet(uri);
    System.out.println(httpget.getURI());
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上述代码会在控制台输出：</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">http://www.google.com/search?q=httpclient&amp;btnG=Google+Search&amp;aq=f&amp;oq=</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-response" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.1.2. HTTP响应</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">服务器收到客户端的http请求后，就会对其进行解析，然后把响应发给客户端，这个响应就是HTTP response.HTTP响应第一行是HTTP版本号，然后是响应状态码和响应内容。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, &quot;OK&quot;);

    System.out.println(response.getProtocolVersion());
    System.out.println(response.getStatusLine().getStatusCode());
    System.out.println(response.getStatusLine().getReasonPhrase());
    System.out.println(response.getStatusLine().toString());
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上述代码会在控制台输出：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HTTP/1.1
    200
    OK
    HTTP/1.1 200 OK
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Working-with-message-headers" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.1.3. 消息头</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">一个Http消息可以包含一系列的消息头，用来对http消息进行描述，比如消息长度，消息类型等等。HttpClient提供了API来获取、添加、修改、遍历消息头。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, &quot;OK&quot;);
    response.addHeader(&quot;Set-Cookie&quot;, &quot;c1=a; path=/; domain=civoz.com&quot;);
    response.addHeader(&quot;Set-Cookie&quot;, &quot;c2=b; path=\&quot;/\&quot;, c3=c; domain=\&quot;civoz.com\&quot;&quot;);
    Header h1 = response.getFirstHeader(&quot;Set-Cookie&quot;);
    System.out.println(h1);
    Header h2 = response.getLastHeader(&quot;Set-Cookie&quot;);
    System.out.println(h2);
    Header[] hs = response.getHeaders(&quot;Set-Cookie&quot;);
    System.out.println(hs.length);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上述代码会在控制台输出：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    Set-Cookie: c1=a; path=/; domain=civoz.com
    Set-Cookie: c2=b; path=&quot;/&quot;, c3=c; domain=&quot;civoz.com&quot;
    2
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">最有效的获取指定类型的消息头的方法还是使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HeaderIterator</code>接口。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, &quot;OK&quot;);
    response.addHeader(&quot;Set-Cookie&quot;, &quot;c1=a; path=/; domain=civoz.com&quot;);
    response.addHeader(&quot;Set-Cookie&quot;, &quot;c2=b; path=\&quot;/\&quot;, c3=c; domain=\&quot;</code><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">civoz.com</code><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">\&quot;&quot;); HeaderIterator it = response.headerIterator(&quot;Set-Cookie&quot;); while (it.hasNext()) { System.out.println(it.next()); } </code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上述代码会在控制台输出：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    Set-Cookie: c1=a; path=/; domain=civoz.com
    Set-Cookie: c2=b; path=&quot;/&quot;, c3=c; domain=&quot;civoz.com&quot;
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HeaderIterator也提供非常便捷的方式，将Http消息解析成单独的消息头元素。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, &quot;OK&quot;);
    response.addHeader(&quot;Set-Cookie&quot;, &quot;c1=a; path=/; domain=civoz.com&quot;);
    response.addHeader(&quot;Set-Cookie&quot;, &quot;c2=b; path=\&quot;/\&quot;, c3=c; domain=\&quot;civoz.com\&quot;&quot;);

    HeaderElementIterator it = new BasicHeaderElementIterator(response.headerIterator(&quot;Set-Cookie&quot;));

    while (it.hasNext()) {
        HeaderElement elem = it.nextElement(); 
        System.out.println(elem.getName() + &quot; = &quot; + elem.getValue());
        NameValuePair[] params = elem.getParameters();
        for (int i = 0; i &lt; params.length; i++) {
            System.out.println(&quot; &quot; + params[i]);
        }
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上述代码会在控制台输出：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    c1 = a
    path=/
    domain=civoz.com
    c2 = b
    path=/
    c3 = c
    domain=civoz.com
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-entity" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.1.4. Http实体</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Http消息可以携带http实体，这个http实体既可以是http请求，也可以是http响应的。Http实体，可以在某些http请求或者响应中发现，但不是必须的。Http规范中定义了两种包含请求的方法：POST和PUT。HTTP响应一般会包含一个内容实体。当然这条规则也有异常情况，如Head方法的响应，204没有内容，304没有修改或者205内容资源重置。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient根据来源的不同，划分了三种不同的Http实体内容。</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">streamed:</strong> Http内容是通过流来接受或者generated on the fly。特别是，streamed这一类包含从http响应中获取的实体内容。一般说来，streamed实体是不可重复的。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">self-contained:</strong> The content is in memory or obtained by means that are independent from a connection or other entity。self-contained类型的实体内容通常是可重复的。这种类型的实体通常用于关闭http请求。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">wrapping:</strong> 这种类型的内容是从另外的http实体中获取的。</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">当从Http响应中读取内容时，上面的三种区分对于连接管理器来说是非常重要的。请求类的实体通常由应用程序创建，由HttpClient发送给服务器，在请求类的实体中，streamed和self-contained两种类型的区别就不重要了。在这种情况下，一般认为不可重复的实体是streamed类型，可重复的实体时self-contained。<br/><a name="Repeatable-entities" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h4 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both;">1.1.4.1. 可重复的实体</h4><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">一个实体是可重复的，也就是说它的包含的内容可以被多次读取。这种多次读取只有self contained（自包含）的实体能做到（比如<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ByteArrayEntity</code>或者<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">StringEntity</code>)。<br/><a name="Using-HTTP-entities" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h4 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both;">1.1.4.2. 使用HTTP实体</h4><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">由于一个Http实体既可以表示二进制内容，又可以表示文本内容，所以Http实体要支持字符编码（为了支持后者，即文本内容）。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">当需要执行一个完整内容的Http请求或者Http请求已经成功，服务器要发送响应到客户端时，Http实体就会被创建。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">如果要从Http实体中读取内容，我们可以利用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>类的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">getContent</code>方法来获取实体的输入流（<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.io.InputStream</code>)，或者利用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>类的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">writeTo(OutputStream)</code>方法来获取输出流，这个方法会把所有的内容写入到给定的流中。<br/>
当实体类已经被接受后，我们可以利用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>类的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">getContentType()</code>和<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">getContentLength()</code>方法来读取<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Content-Type</code>和<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Content-Length</code>两个头消息（如果有的话）。由于<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Content-Type</code>包含mime-types的字符编码，比如text/plain或者text/html,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>类的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">getContentEncoding()</code>方法就是读取这个编码的。如果头信息不存在，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">getContentLength（）</code>会返回-1,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">getContentType()</code>会返回NULL。如果<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Content-Type</code>信息存在，就会返回一个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Header</code>类。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">当为发送消息创建Http实体时，需要同时附加meta信息。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    StringEntity myEntity = new StringEntity(&quot;important message&quot;, ContentType.create(&quot;text/plain&quot;, &quot;UTF-8&quot;));
    System.out.println(myEntity.getContentType());
    System.out.println(myEntity.getContentLength());
    System.out.println(EntityUtils.toString(myEntity));
    System.out.println(EntityUtils.toByteArray(myEntity).length);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上述代码会在控制台输出：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    Content-Type: text/plain; charset=utf-8
    17
    important message
    17
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Ensuring-release-of-low-level-resources" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.1.5. 确保底层的资源连接被释放</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">为了确保系统资源被正确地释放，我们要么管理Http实体的内容流、要么关闭Http响应。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient =  HttpClients.createDefault();
    HttpGet httpget = new HttpGet(&quot;http://www.civoz.com/&quot;);
    CloseableHttpResponse response = httpclient.execute(httpget);
    try {
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            InputStream instream = entity.getContent();
            try {
                // do something useful
            } finally {
                instream.close();
            }
        }
    } finally {
        response.close();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">关闭Http实体内容流和关闭Http响应的区别在于，前者通过消耗掉Http实体内容来保持相关的http连接，然后后者会立即关闭、丢弃http连接。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">请注意<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">writeTo(OutputStream)</code>方法，当Http实体被写入到OutputStream后，也要确保释放系统资源。如果这个方法内调用了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">getContent()</code>方法，那么它会有一个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.io.InpputStream</code>的实例，我们需要在finally中关闭这个流。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">但是也有这样的情况，我们只需要获取Http响应内容的一小部分，而获取整个内容并、实现连接的可重复性代价太大，这时我们可以通过关闭响应的方式来关闭内容输入、输出流。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = HttpClients.createDefault();
    HttpGet httpget = new HttpGet(&quot;http://www.civoz.com/&quot;);
    CloseableHttpResponse response = httpclient.execute(httpget);
    try {
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            InputStream instream = entity.getContent();
            int byteOne = instream.read();
            int byteTwo = instream.read();
            // Do not need the rest
    }
    } finally {
        response.close();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上面的代码执行后，连接变得不可用，所有的资源都将被释放。<br/><a name="Consuming-entity-content" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.1.6. 消耗Http实体内容</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient推荐使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">getConent()</code>方法或者<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">writeTo(OutputStream)</code>方法来消耗掉Http实体内容。HttpClient也提供了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">EntityUtils</code>这个类，这个类提供一些静态方法可以更容易地读取Http实体的内容和信息。和以<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.io.InputStream</code>流读取内容的方式相比，EntityUtils提供的方法可以以字符串或者字节数组的形式读取Http实体。但是，强烈不推荐使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">EntityUtils</code>这个类，除非目标服务器发出的响应是可信任的，并且http响应实体的长度不会过大。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = HttpClients.createDefault();
    HttpGet httpget = new HttpGet(&quot;http://www.civoz.com/&quot;);
    CloseableHttpResponse response = httpclient.execute(httpget);
    try {
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            long len = entity.getContentLength();
            if (len != -1 &amp;&amp; len &lt; 2048) {
                System.out.println(EntityUtils.toString(entity));
            } else {
                // Stream content out
            }
        }
    } finally {
        response.close();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">有些情况下，我们希望可以重复读取Http实体的内容。这就需要把Http实体内容缓存在内存或者磁盘上。最简单的方法就是把Http Entity转化成<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BufferedHttpEntity</code>，这样就把原Http实体的内容缓冲到了内存中。后面我们就可以重复读取BufferedHttpEntity中的内容。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpResponse response = &lt;...&gt;
    HttpEntity entity = response.getEntity();
    if (entity != null) {
        entity = new BufferedHttpEntity(entity);
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Producing-entity-content" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.1.7. 创建Http实体内容</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient提供了一个类，这些类可以通过http连接高效地输出Http实体内容。（原文是HttpClient provides several classes that can be used to efficiently stream out content though HTTP connections.感觉thought应该是throught）HttpClient提供的这几个类涵盖的常见的数据类型，如String，byte数组，输入流，和文件类型：<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">StringEntity</code>,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ByteArrayEntity</code>,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">InputStreamEntity</code>,<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">FileEntity</code>。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    File file = new File(&quot;somefile.txt&quot;);
    FileEntity entity = new FileEntity(file, ContentType.create(&quot;text/plain&quot;, &quot;UTF-8&quot;));

    HttpPost httppost = new HttpPost(&quot;http://www.civoz.com/action.do&quot;);
    httppost.setEntity(entity);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">请注意由于<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">InputStreamEntity</code>只能从下层的数据流中读取一次，所以它是不能重复的。推荐，通过继承<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>这个自包含的类来自定义HttpEntity类，而不是直接使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">InputStreamEntity</code>这个类。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">FileEntity</code>就是一个很好的起点（FileEntity就是继承的HttpEntity）。<br/><a name="HTML-forms" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h4 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both;">1.7.1.1. HTML表单</h4><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">很多应用程序需要模拟提交Html表单的过程，举个例子，登陆一个网站或者将输入内容提交给服务器。HttpClient提供了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">UrlEncodedFormEntity</code>这个类来帮助实现这一过程。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    List&lt;NameValuePair&gt; formparams = new ArrayList&lt;NameValuePair&gt;();
    formparams.add(new BasicNameValuePair(&quot;param1&quot;, &quot;value1&quot;));
    formparams.add(new BasicNameValuePair(&quot;param2&quot;, &quot;value2&quot;));
    UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, Consts.UTF_8);
    HttpPost httppost = new HttpPost(&quot;http://www.civoz.com/handler.do&quot;);
    httppost.setEntity(entity);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">UrlEncodedFormEntity</code>实例会使用所谓的Url编码的方式对我们的参数进行编码，产生的结果如下：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    param1=value1&amp;param2=value2
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Content-chunking" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h4 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both;">1.1.7.2. 内容分块</h4><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">一般来说，推荐让HttpClient自己根据Http消息传递的特征来选择最合适的传输编码。当然，如果非要手动控制也是可以的，可以通过设置<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpEntity</code>的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">setChunked()</code>为true。请注意：HttpClient仅会将这个参数看成是一个建议。如果Http的版本（如http 1.0)不支持内容分块，那么这个参数就会被忽略。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    StringEntity entity = new StringEntity(&quot;important message&quot;,
    ContentType.create(&quot;plain/text&quot;, Consts.UTF_8));
    entity.setChunked(true);
    HttpPost httppost = new HttpPost(&quot;http://www.civoz.com/acrtion.do&quot;);
    httppost.setEntity(entity);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Response-handlers" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.1.8. Response handlers</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">最简单也是最方便的处理http响应的方法就是使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ResponseHandler</code>接口，这个接口中有<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">handleResponse(HttpResponse response)</code>方法。使用这个方法，用户完全不用关心http连接管理器。当使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ResponseHandler</code>时，HttpClient会自动地将Http连接释放给Http管理器，即使http请求失败了或者抛出了异常。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = HttpClients.createDefault();
    HttpGet httpget = new HttpGet(&quot;http://www.civoz.com/json&quot;);

    ResponseHandler&lt;MyJsonObject&gt; rh = new ResponseHandler&lt;MyJsonObject&gt;() {

        @Override
        public JsonObject handleResponse(
            final HttpResponse response) throws IOException {
            StatusLine statusLine = response.getStatusLine();
            HttpEntity entity = response.getEntity();
            if (statusLine.getStatusCode() &gt;= 300) {
                throw new HttpResponseException(
                        statusLine.getStatusCode(),
                        statusLine.getReasonPhrase());
            }
            if (entity == null) {
                throw new ClientProtocolException(&quot;Response contains no content&quot;);
            }
            Gson gson = new GsonBuilder().create();
            ContentType contentType = ContentType.getOrDefault(entity);
            Charset charset = contentType.getCharset();
            Reader reader = new InputStreamReader(entity.getContent(), charset);
            return gson.fromJson(reader, MyJsonObject.class);
        }
    };
    //设置responseHandler，当执行http方法时，就会返回MyJsonObject对象。
    MyJsonObject myjson = client.execute(httpget, rh);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HttpClient-interface" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">1.2. HttpClient接口</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">对于Http请求执行过程来说，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpClient</code>的接口有着必不可少的作用。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpClient</code>接口没有对Http请求的过程做特别的限制和详细的规定，连接管理、状态管理、授权信息和重定向处理这些功能都单独实现。这样用户就可以更简单地拓展接口的功能（比如缓存响应内容）。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">一般说来，HttpClient实际上就是一系列特殊的handler或者说策略接口的实现，这些handler（测试接口）负责着处理Http协议的某一方面，比如重定向、认证处理、有关连接持久性和keep alive持续时间的决策。这样就允许用户使用自定义的参数来代替默认配置，实现个性化的功能。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    ConnectionKeepAliveStrategy keepAliveStrat = new DefaultConnectionKeepAliveStrategy() {

        @Override
        public long getKeepAliveDuration(
            HttpResponse response,
            HttpContext context) {
                long keepAlive = super.getKeepAliveDuration(response, context);
                if (keepAlive == -1) {
                    //如果服务器没有设置keep-alive这个参数，我们就把它设置成5秒
                    keepAlive = 5000;
                }
                return keepAlive;
        }

    };
    //定制我们自己的httpclient
    CloseableHttpClient httpclient = HttpClients.custom()
            .setKeepAliveStrategy(keepAliveStrat)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HttpClient-thread-safety" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.2.1.HttpClient的线程安全性</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpClient</code>已经实现了线程安全。所以希望用户在实例化HttpClient时，也要支持为多个请求使用。<br/><a name="HttpClient-resource-deallocation" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.2.2.HttpClient的内存分配</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">当一个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CloseableHttpClient</code>的实例不再被使用，并且它的作用范围即将失效，和它相关的连接必须被关闭，关闭方法可以调用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CloseableHttpClient</code>的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">close()</code>方法。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = HttpClients.createDefault();
    try {
        &lt;...&gt;
    } finally {
        //关闭连接
        httpclient.close();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-execution-context" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">1.3.HTTP执行上下文</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">最初，Http被设计成一种无状态的、面向请求-响应的协议。然而，在实际使用中，我们希望能够在一些逻辑相关的请求-响应中，保持状态信息。为了使应用程序可以保持Http的持续状态，HttpClient允许http连接在特定的Http上下文中执行。如果在持续的http请求中使用了同样的上下文，那么这些请求就可以被分配到一个逻辑会话中。HTTP上下文就和一个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.util.Map&lt;String, Object&gt;</code>功能类似。它实际上就是一个任意命名的值的集合。应用程序可以在Http请求执行前填充上下文的值，也可以在请求执行完毕后检查上下文。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpContext</code>可以包含任意类型的对象，因此如果在多线程中共享上下文会不安全。推荐每个线程都只包含自己的http上下文。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">在Http请求执行的过程中，HttpClient会自动添加下面的属性到Http上下文中：</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpConnection</code>的实例，表示客户端与服务器之间的连接</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpHost</code>的实例，表示要连接的木包服务器</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpRoute</code>的实例，表示全部的连接路由</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpRequest</code>的实例，表示Http请求。在执行上下文中，最终的HttpRequest对象会代表http消息的状态。Http/1.0和Http/1.1都默认使用相对的uri。但是如果使用了非隧道模式的代理服务器，就会使用绝对路径的uri。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpResponse</code>的实例，表示Http响应</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.lang.Boolean</code>对象，表示是否请求被成功的发送给目标服务器</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">RequestConfig</code>对象，表示http request的配置信息</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.util.List&lt;Uri&gt;</code>对象，表示Http响应中的所有重定向地址</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">我们可以使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpClientContext</code>这个适配器来简化和上下文交互的过程。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpContext context = &lt;...&gt;
    HttpClientContext clientContext = HttpClientContext.adapt(context);
    HttpHost target = clientContext.getTargetHost();
    HttpRequest request = clientContext.getRequest();
    HttpResponse response = clientContext.getResponse();
    RequestConfig config = clientContext.getRequestConfig();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">同一个逻辑会话中的多个Http请求，应该使用相同的Http上下文来执行，这样就可以自动地在http请求中传递会话上下文和状态信息。<br/>
在下面的例子中，我们在开头设置的参数，会被保存在上下文中，并且会应用到后续的http请求中（源英文中有个拼写错误）。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = HttpClients.createDefault();
    RequestConfig requestConfig = RequestConfig.custom()
            .setSocketTimeout(1000)
            .setConnectTimeout(1000)
            .build();

    HttpGet httpget1 = new HttpGet(&quot;http://www.civoz.com/1&quot;);
    httpget1.setConfig(requestConfig);
    CloseableHttpResponse response1 = httpclient.execute(httpget1, context);
    try {
        HttpEntity entity1 = response1.getEntity();
    } finally {
        response1.close();
    }
    //httpget2被执行时，也会使用httpget1的上下文
    HttpGet httpget2 = new HttpGet(&quot;http://www.civoz.com/2&quot;);
    CloseableHttpResponse response2 = httpclient.execute(httpget2, context);
    try {
        HttpEntity entity2 = response2.getEntity();
    } finally {
        response2.close();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Exception-handling" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">1.4. 异常处理</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient会被抛出两种类型的异常，一种是<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.io.IOException</code>，当遇到I/O异常时抛出（socket超时，或者socket被重置）;另一种是<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpException</code>,表示Http失败，如Http协议使用不正确。通常认为，I/O错误时不致命、可修复的，而Http协议错误是致命了，不能自动修复的错误。<br/><a name="HTTP-transport-safety" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.4.1.HTTP传输安全</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Http协议不能满足所有类型的应用场景，我们需要知道这点。Http是个简单的面向协议的请求/响应的协议，当初它被设计用来支持静态或者动态生成的内容检索，之前从来没有人想过让它支持事务性操作。例如，Http服务器成功接收、处理请求后，生成响应消息，并且把状态码发送给客户端，这个过程是Http协议应该保证的。但是，如果客户端由于读取超时、取消请求或者系统崩溃导致接收响应失败，服务器不会回滚这一事务。如果客户端重新发送这个请求，服务器就会重复的解析、执行这个事务。在一些情况下，这会导致应用程序的数据损坏和应用程序的状态不一致。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">即使Http当初设计是不支持事务操作，但是它仍旧可以作为传输协议为某些关键程序提供服务。为了保证Http传输层的安全性，系统必须保证应用层上的http方法的幂等性（To ensure HTTP transport layer safety the system must ensure the idempotency of HTTP methods on the application layer）。<br/><a name="Idempotent-methods" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.4.2.方法的幂等性</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HTTP/1.1规范中是这样定义幂等方法的，Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request。用其他话来说，应用程序需要正确地处理同一方法多次执行造成的影响。添加一个具有唯一性的id就能避免重复执行同一个逻辑请求，问题解决。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">请知晓，这个问题不只是HttpClient才会有，基于浏览器的应用程序也会遇到Http方法不幂等的问题。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient默认把非实体方法<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">get</code>、<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">head</code>方法看做幂等方法，把实体方法<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">post</code>、<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">put</code>方法看做非幂等方法。<br/><a name="Automatic-exception-recovery" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.4.3.异常自动修复</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">默认情况下，HttpClient会尝试自动修复I/O异常。这种自动修复仅限于修复几个公认安全的异常。</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">HttpClient不会尝试修复任何逻辑或者http协议错误（即从HttpException衍生出来的异常）。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">HttpClient会自动再次发送幂等的方法（如果首次执行失败。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">HttpClient会自动再次发送遇到transport异常的方法，前提是Http请求仍旧保持着连接（例如http请求没有全部发送给目标服务器，HttpClient会再次尝试发送）。</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Request-retry-handler" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">1.4.4.请求重试handler</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">如果要自定义异常处理机制，我们需要实现<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpRequestRetryHandler</code>接口。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpRequestRetryHandler myRetryHandler = new HttpRequestRetryHandler() {

        public boolean retryRequest(
                IOException exception,
                int executionCount,
                HttpContext context) {
            if (executionCount &gt;= 5) {
                // 如果已经重试了5次，就放弃
                return false;
            }
            if (exception instanceof InterruptedIOException) {
                // 超时
                return false;
            }
            if (exception instanceof UnknownHostException) {
                // 目标服务器不可达
                return false;
            }
            if (exception instanceof ConnectTimeoutException) {
                // 连接被拒绝
                return false;
            }
            if (exception instanceof SSLException) {
                // ssl握手异常
                return false;
            }
            HttpClientContext clientContext = HttpClientContext.adapt(context);
            HttpRequest request = clientContext.getRequest();
            boolean idempotent = !(request instanceof HttpEntityEnclosingRequest);
            if (idempotent) {
                // 如果请求是幂等的，就再次尝试
                return true;
            }
            return false;
        }

    };  
    CloseableHttpClient httpclient = HttpClients.custom()
            .setRetryHandler(myRetryHandler)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Aborting-requests" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">1.5.终止请求</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">有时候由于目标服务器负载过高或者客户端目前有太多请求积压，http请求不能在指定时间内执行完毕。这时候终止这个请求，释放阻塞I/O的进程，就显得很必要。通过HttpClient执行的Http请求，在任何状态下都能通过调用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpUriRequest</code>的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">abort()</code>方法来终止。这个方法是线程安全的，并且能在任何线程中调用。当Http请求被终止了，本线程（即使现在正在阻塞I/O）也会通过抛出一个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">InterruptedIOException</code>异常，来释放资源。<br/><a name="HTTP-protocol-interceptors" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">1.6. HTTP协议拦截器</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HTTP协议拦截器是一种实现一个特定的方面的HTTP协议的代码程序。通常情况下，协议拦截器会将一个或多个头消息加入到接受或者发送的消息中。协议拦截器也可以操作消息的内容实体—消息内容的压缩/解压缩就是个很好的例子。通常，这是通过使用“装饰”开发模式，一个包装实体类用于装饰原来的实体来实现。一个拦截器可以合并，形成一个逻辑单元。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">协议拦截器可以通过共享信息协作——比如处理状态——通过HTTP执行上下文。协议拦截器可以使用Http上下文存储一个或者多个连续请求的处理状态。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">通常，只要拦截器不依赖于一个特定状态的http上下文，那么拦截执行的顺序就无所谓。如果协议拦截器有相互依赖关系，必须以特定的顺序执行，那么它们应该按照特定的顺序加入到协议处理器中。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">协议处理器必须是线程安全的。类似于servlets，协议拦截器不应该使用变量实体，除非访问这些变量是同步的（线程安全的）。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面是个例子，讲述了本地的上下文时如何在连续请求中记录处理状态的：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = HttpClients.custom()
            .addInterceptorLast(new HttpRequestInterceptor() {

                public void process(
                        final HttpRequest request,
                        final HttpContext context) throws HttpException, IOException {
                        //AtomicInteger是个线程安全的整型类
                    AtomicInteger count = (AtomicInteger) context.getAttribute(&quot;count&quot;);
                    request.addHeader(&quot;Count&quot;, Integer.toString(count.getAndIncrement()));
                }

            })
            .build();

    AtomicInteger count = new AtomicInteger(1);
    HttpClientContext localContext = HttpClientContext.create();
    localContext.setAttribute(&quot;count&quot;, count);

    HttpGet httpget = new HttpGet(&quot;http://www.civoz.com/&quot;);
    for (int i = 0; i &lt; 10; i++) {
        CloseableHttpResponse response = httpclient.execute(httpget, localContext);
        try {
            HttpEntity entity = response.getEntity();
        } finally {
            response.close();
        }
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上面代码在发送http请求时，会自动添加Count这个header，可以使用wireshark抓包查看。<br/><a name="Redirect-handling" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">1.7. 重定向处理</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient会自动处理所有类型的重定向，除了那些Http规范明确禁止的重定向。See Other (status code 303) redirects on POST and PUT requests are converted to GET requests as required by the HTTP specification. 我们可以使用自定义的重定向策略来放松Http规范对Post方法重定向的限制。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    //LaxRedirectStrategy可以自动重定向所有的HEAD，GET，POST请求，解除了http规范对post请求重定向的限制。
    LaxRedirectStrategy redirectStrategy = new LaxRedirectStrategy();
    CloseableHttpClient httpclient = HttpClients.custom()
            .setRedirectStrategy(redirectStrategy)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient在请求执行过程中，经常需要重写请求的消息。 HTTP/1.0和HTTP/1.1都默认使用相对的uri路径。同样，原始的请求可能会被一次或者多次的重定向。最终结对路径的解释可以使用最初的请求和上下文。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">URIUtils</code>类的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">resolve</code>方法可以用于将拦截的绝对路径构建成最终的请求。这个方法包含了最后一个分片标识符或者原始请求。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = HttpClients.createDefault();
    HttpClientContext context = HttpClientContext.create();
    HttpGet httpget = new HttpGet(&quot;http://www.civoz.com:8080/&quot;);
    CloseableHttpResponse response = httpclient.execute(httpget, context);
    try {
        HttpHost target = context.getTargetHost();
        List&lt;URI&gt; redirectLocations = context.getRedirectLocations();
        URI location = URIUtils.resolve(httpget.getURI(), target, redirectLocations);
        System.out.println(&quot;Final HTTP location: &quot; + location.toASCIIString());
        // 一般会取得一个绝对路径的uri
    } finally {
        response.close();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><br/></p></div></div></div></div></div></div></div></div></div><div><table bgcolor="#D4DDE5" border="0" width="100%"><tbody><tr><td><h1 id="connection-manage">HttpClient4.3教程 第二章.连接管理</h1></td></tr></tbody></table></div><div style="font-size: 16px"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: Arial, sans-serif; font-size: 15px; font-style: normal; outline: 0px; vertical-align: baseline; line-height: 1.575; background-color: rgb(249, 249, 249); color: rgb(55, 55, 55); font-variant: normal;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; overflow: hidden;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="-webkit-box-shadow: rgb(187, 187, 187) 0px 0px 5px; box-shadow: rgb(187, 187, 187) 0px 0px 5px; background-color: rgb(252, 252, 252);"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; word-wrap: break-word;"><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><br/></h2><h2 id="connection-persistence" style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">2.1.持久连接</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">两个主机建立连接的过程是很复杂的一个过程，涉及到多个数据包的交换，并且也很耗时间。Http连接需要的三次握手开销很大，这一开销对于比较小的http消息来说更大。但是如果我们直接使用已经建立好的http连接，这样花费就比较小，吞吐率更大。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HTTP/1.1默认就支持Http连接复用。兼容HTTP/1.0的终端也可以通过声明来保持连接，实现连接复用。HTTP代理也可以在一定时间内保持连接不释放，方便后续向这个主机发送http请求。这种保持连接不释放的情况实际上是建立的持久连接。HttpClient也支持持久连接。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-connection-routing" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">2.2.HTTP连接路由</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient既可以直接、又可以通过多个中转路由（hops）和目标服务器建立连接。HttpClient把路由分为三种plain（明文 ），tunneled（隧道）和layered（分层）。隧道连接中使用的多个中间代理被称作代理链。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">客户端直接连接到目标主机或者只通过了一个中间代理，这种就是Plain路由。客户端通过第一个代理建立连接，通过代理链tunnelling，这种情况就是Tunneled路由。不通过中间代理的路由不可能时tunneled路由。客户端在一个已经存在的连接上进行协议分层，这样建立起来的路由就是layered路由。协议只能在隧道—&gt;目标主机，或者直接连接（没有代理），这两种链路上进行分层。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Route-computation" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.2.1.路由计算</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">RouteInfo</code>接口包含了数据包发送到目标主机过程中，经过的路由信息。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpRoute</code>类继承了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">RouteInfo</code>接口，是<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">RouteInfo</code>的具体实现，这个类是不允许修改的。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpTracker</code>类也实现了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">RouteInfo</code>接口，它是可变的，HttpClient会在内部使用这个类来探测到目标主机的剩余路由。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpRouteDirector</code>是个辅助类，可以帮助计算数据包的下一步路由信息。这个类也是在HttpClient内部使用的。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpRoutePlanner</code>接口可以用来表示基于http上下文情况下，客户端到服务器的路由计算策略。HttpClient有两个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpRoutePlanner</code>的实现类。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SystemDefaultRoutePlanner</code>这个类基于<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.net.ProxySelector</code>，它默认使用jvm的代理配置信息，这个配置信息一般来自系统配置或者浏览器配置。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">DefaultProxyRoutePlanner</code>这个类既不使用java本身的配置，也不使用系统或者浏览器的配置。它通常通过默认代理来计算路由信息。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Secure-HTTP-connections" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.2.2. 安全的Http连接</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">为了防止通过Http消息传递的信息不被未授权的第三方获取、截获，Http可以使用SSL/TLS协议来保证http传输安全，这个协议是当前使用最广的。当然也可以使用其他的加密技术。但是通常情况下，Http信息会在加密的SSL/TLS连接上进行传输。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-connection-managers" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">2.3. HTTP连接管理器</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Managed-connections-and-connection-managers" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.3.1. 管理连接和连接管理器</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Http连接是复杂，有状态的，线程不安全的对象，所以它必须被妥善管理。一个Http连接在同一时间只能被一个线程访问。HttpClient使用一个叫做Http连接管理器的特殊实体类来管理Http连接，这个实体类要实现<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpClientConnectionManager</code>接口。Http连接管理器在新建http连接时，作为工厂类;管理持久http连接的生命周期;同步持久连接（确保线程安全，即一个http连接同一时间只能被一个线程访问）。Http连接管理器和<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ManagedHttpClientConnection</code>的实例类一起发挥作用，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ManagedHttpClientConnection</code>实体类可以看做http连接的一个代理服务器，管理着I/O操作。如果一个Http连接被释放或者被它的消费者明确表示要关闭，那么底层的连接就会和它的代理进行分离，并且该连接会被交还给连接管理器。这是，即使服务消费者仍然持有代理的引用，它也不能再执行I/O操作，或者更改Http连接的状态。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面的代码展示了如何从连接管理器中取得一个http连接：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpClientContext context = HttpClientContext.create();
    HttpClientConnectionManager connMrg = new BasicHttpClientConnectionManager();
    HttpRoute route = new HttpRoute(new HttpHost(&quot;www.civoz.com&quot;, 80));
    // 获取新的连接. 这里可能耗费很多时间
    ConnectionRequest connRequest = connMrg.requestConnection(route, null);
    // 10秒超时
    HttpClientConnection conn = connRequest.get(10, TimeUnit.SECONDS);
    try {
        // 如果创建连接失败
        if (!conn.isOpen()) {
            // establish connection based on its route info
            connMrg.connect(conn, route, 1000, context);
            // and mark it as route complete
            connMrg.routeComplete(conn, route, context);
        }
        // 进行自己的操作.
    } finally {
        connMrg.releaseConnection(conn, null, 1, TimeUnit.MINUTES);
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">如果要终止连接，可以调用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ConnectionRequest</code>的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">cancel()</code>方法。这个方法会解锁被<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ConnectionRequest</code>类<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">get()</code>方法阻塞的线程。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Simple-connection-manager" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.3.2.简单连接管理器</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BasicHttpClientConnectionManager</code>是个简单的连接管理器，它一次只能管理一个连接。尽管这个类是线程安全的，它在同一时间也只能被一个线程使用。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BasicHttpClientConnectionManager</code>会尽量重用旧的连接来发送后续的请求，并且使用相同的路由。如果后续请求的路由和旧连接中的路由不匹配，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BasicHttpClientConnectionManager</code>就会关闭当前连接，使用请求中的路由重新建立连接。如果当前的连接正在被占用，会抛出<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.lang.IllegalStateException</code>异常。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Pooling-connection-manager" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.3.3.连接池管理器</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">相对<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BasicHttpClientConnectionManager</code>来说，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">PoolingHttpClientConnectionManager</code>是个更复杂的类，它管理着连接池，可以同时为很多线程提供http连接请求。Connections are pooled on a per route basis.当请求一个新的连接时，如果连接池有有可用的持久连接，连接管理器就会使用其中的一个，而不是再创建一个新的连接。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">PoolingHttpClientConnectionManager</code>维护的连接数在每个路由基础和总数上都有限制。默认，每个路由基础上的连接不超过2个，总连接数不能超过20。在实际应用中，这个限制可能会太小了，尤其是当服务器也使用Http协议时。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面的例子演示了如果调整连接池的参数：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
    // 将最大连接数增加到200
    cm.setMaxTotal(200);
    // 将每个路由基础的连接增加到20
    cm.setDefaultMaxPerRoute(20);
    //将目标主机的最大连接数增加到50
    HttpHost localhost = new HttpHost(&quot;www.civoz.com&quot;, 80);
    cm.setMaxPerRoute(new HttpRoute(localhost), 50);

    CloseableHttpClient httpClient = HttpClients.custom()
            .setConnectionManager(cm)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Connection-manager-shutdown" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.3.4.关闭连接管理器</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">当一个HttpClient的实例不在使用，或者已经脱离它的作用范围，我们需要关掉它的连接管理器，来关闭掉所有的连接，释放掉这些连接占用的系统资源。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpClient = &lt;...&gt;
    httpClient.close();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Multithreaded-request-execution" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">2.4.多线程请求执行</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">当使用了请求连接池管理器（比如<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">PoolingClientConnectionManager</code>）后，HttpClient就可以同时执行多个线程的请求了。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">PoolingClientConnectionManager</code>会根据它的配置来分配请求连接。如果连接池中的所有连接都被占用了，那么后续的请求就会被阻塞，直到有连接被释放回连接池中。为了防止永远阻塞的情况发生，我们可以把<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">http.conn-manager.timeout</code>的值设置成一个整数。如果在超时时间内，没有可用连接，就会抛出<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ConnectionPoolTimeoutException</code>异常。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
    CloseableHttpClient httpClient = HttpClients.custom()
            .setConnectionManager(cm)
            .build();

    // URL列表数组
    String[] urisToGet = {
        &quot;http://www.domain1.com/&quot;,
        &quot;http://www.domain2.com/&quot;,
        &quot;http://www.domain3.com/&quot;,
        &quot;http://www.domain4.com/&quot;
    };

    // 为每个url创建一个线程，GetThread是自定义的类
    GetThread[] threads = new GetThread[urisToGet.length];
    for (int i = 0; i &lt; threads.length; i++) {
        HttpGet httpget = new HttpGet(urisToGet[i]);
        threads[i] = new GetThread(httpClient, httpget);
    }

    // 启动线程
    for (int j = 0; j &lt; threads.length; j++) {
        threads[j].start();
    }

    // join the threads
    for (int j = 0; j &lt; threads.length; j++) {
        threads[j].join();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">即使HttpClient的实例是线程安全的，可以被多个线程共享访问，但是仍旧推荐每个线程都要有自己专用实例的HttpContext。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面是GetThread类的定义：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    static class GetThread extends Thread {

        private final CloseableHttpClient httpClient;
        private final HttpContext context;
        private final HttpGet httpget;

        public GetThread(CloseableHttpClient httpClient, HttpGet httpget) {
            this.httpClient = httpClient;
            this.context = HttpClientContext.create();
            this.httpget = httpget;
        }

        @Override
        public void run() {
            try {
                CloseableHttpResponse response = httpClient.execute(
                        httpget, context);
                try {
                    HttpEntity entity = response.getEntity();
                } finally {
                    response.close();
                }
            } catch (ClientProtocolException ex) {
                // Handle protocol errors
            } catch (IOException ex) {
                // Handle I/O errors
            }
        }

    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Connection-eviction-policy" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">2.5. 连接回收策略</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">经典阻塞I/O模型的一个主要缺点就是只有当组侧I/O时，socket才能对I/O事件做出反应。当连接被管理器收回后，这个连接仍然存活，但是却无法监控socket的状态，也无法对I/O事件做出反馈。如果连接被服务器端关闭了，客户端监测不到连接的状态变化（也就无法根据连接状态的变化，关闭本地的socket）。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient为了缓解这一问题造成的影响，会在使用某个连接前，监测这个连接是否已经过时，如果服务器端关闭了连接，那么连接就会失效。这种过时检查并不是100%有效，并且会给每个请求增加10到30毫秒额外开销。唯一一个可行的，且does not involve a one thread per socket model for idle connections的解决办法，是建立一个监控线程，来专门回收由于长时间不活动而被判定为失效的连接。这个监控线程可以周期性的调用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ClientConnectionManager</code>类的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">closeExpiredConnections()</code>方法来关闭过期的连接，回收连接池中被关闭的连接。它也可以选择性的调用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ClientConnectionManager</code>类的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">closeIdleConnections()</code>方法来关闭一段时间内不活动的连接。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    public static class IdleConnectionMonitorThread extends Thread {

        private final HttpClientConnectionManager connMgr;
        private volatile boolean shutdown;

        public IdleConnectionMonitorThread(HttpClientConnectionManager connMgr) {
            super();
            this.connMgr = connMgr;
        }

        @Override
        public void run() {
            try {
                while (!shutdown) {
                    synchronized (this) {
                        wait(5000);
                        // 关闭失效的连接
                        connMgr.closeExpiredConnections();
                        // 可选的, 关闭30秒内不活动的连接
                        connMgr.closeIdleConnections(30, TimeUnit.SECONDS);
                    }
                }
            } catch (InterruptedException ex) {
                // terminate
            }
        }

        public void shutdown() {
            shutdown = true;
            synchronized (this) {
                notifyAll();
            }
        }

    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Connection-keep-alive-strategy" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">2.6. 连接存活策略</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Http规范没有规定一个持久连接应该保持存活多久。有些Http服务器使用非标准的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Keep-Alive</code>头消息和客户端进行交互，服务器端会保持数秒时间内保持连接。HttpClient也会利用这个头消息。如果服务器返回的响应中没有包含<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Keep-Alive</code>头消息，HttpClient会认为这个连接可以永远保持。然而，很多服务器都会在不通知客户端的情况下，关闭一定时间内不活动的连接，来节省服务器资源。在某些情况下默认的策略显得太乐观，我们可能需要自定义连接存活策略。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    ConnectionKeepAliveStrategy myStrategy = new ConnectionKeepAliveStrategy() {

        public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
            // Honor 'keep-alive' header
            HeaderElementIterator it = new BasicHeaderElementIterator(
                    response.headerIterator(HTTP.CONN_KEEP_ALIVE));
            while (it.hasNext()) {
                HeaderElement he = it.nextElement();
                String param = he.getName();
                String value = he.getValue();
                if (value != null &amp;&amp; param.equalsIgnoreCase(&quot;timeout&quot;)) {
                    try {
                        return Long.parseLong(value) * 1000;
                    } catch(NumberFormatException ignore) {
                    }
                }
            }
            HttpHost target = (HttpHost) context.getAttribute(
                    HttpClientContext.HTTP_TARGET_HOST);
            if (&quot;www.naughty-server.com&quot;.equalsIgnoreCase(target.getHostName())) {
                // Keep alive for 5 seconds only
                return 5 * 1000;
            } else {
                // otherwise keep alive for 30 seconds
                return 30 * 1000;
            }
        }

    };
    CloseableHttpClient client = HttpClients.custom()
            .setKeepAliveStrategy(myStrategy)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Connection-socket-factories" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">2.7.socket连接工厂</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Http连接使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.net.Socket</code>类来传输数据。这依赖于<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ConnectionSocketFactory</code>接口来创建、初始化和连接socket。这样也就允许HttpClient的用户在代码运行时，指定socket初始化的代码。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">PlainConnectionSocketFactory</code>是默认的创建、初始化明文socket（不加密）的工厂类。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">创建socket和使用socket连接到目标主机这两个过程是分离的，所以我们可以在连接发生阻塞时，关闭socket连接。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpClientContext clientContext = HttpClientContext.create();
    PlainConnectionSocketFactory sf = PlainConnectionSocketFactory.getSocketFactory();
    Socket socket = sf.createSocket(clientContext);
    int timeout = 1000; //ms
    HttpHost target = new HttpHost(&quot;www.civoz.com&quot;);
    InetSocketAddress remoteAddress = new InetSocketAddress(
        InetAddress.getByName(&quot;www.civoz.com&quot;, 80);
        //connectSocket源码中，实际没有用到target参数
        sf.connectSocket(timeout, socket, target, remoteAddress, null, clientContext);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Secure-socket-layering" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.7.1.安全socket分层</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">LayeredConnectionSocketFactory</code>是<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ConnectionSocketFactory</code>的拓展接口。分层socket工厂类可以在明文socket的基础上创建socket连接。分层socket主要用于在代理服务器之间创建安全socket。HttpClient使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SSLSocketFactory</code>这个类实现安全socket，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SSLSocketFactory</code>实现了SSL/TLS分层。请知晓，HttpClient没有自定义任何加密算法。它完全依赖于Java加密标准（JCE）和安全套接字（JSEE）拓展。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Integration-with-connection-manager" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.7.2.集成连接管理器</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">自定义的socket工厂类可以和指定的协议（Http、Https）联系起来，用来创建自定义的连接管理器。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    ConnectionSocketFactory plainsf = &lt;...&gt;
    LayeredConnectionSocketFactory sslsf = &lt;...&gt;
    Registry&lt;ConnectionSocketFactory&gt; r = RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()
            .register(&quot;http&quot;, plainsf)
            .register(&quot;https&quot;, sslsf)
            .build();

    HttpClientConnectionManager cm = new PoolingHttpClientConnectionManager(r);
    HttpClients.custom()
            .setConnectionManager(cm)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="SSL-TLS-customization" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.7.3.SSL/TLS定制</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SSLSocketFactory</code>来创建ssl连接。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SSLSocketFactory</code>允许用户高度定制。它可以接受<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">javax.net.ssl.SSLContext</code>这个类的实例作为参数，来创建自定义的ssl连接。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpClientContext clientContext = HttpClientContext.create();
    KeyStore myTrustStore = &lt;...&gt;
    SSLContext sslContext = SSLContexts.custom()
            .useTLS()
            .loadTrustMaterial(myTrustStore)
            .build();
    SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Hostname-verification" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">2.7.4.域名验证</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">除了信任验证和在ssl/tls协议层上进行客户端认证，HttpClient一旦建立起连接，就可以选择性验证目标域名和存储在X.509证书中的域名是否一致。这种验证可以为服务器信任提供额外的保障。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">X509HostnameVerifier</code>接口代表主机名验证的策略。在HttpClient中，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">X509HostnameVerifier</code>有三个实现类。重要提示：主机名有效性验证不应该和ssl信任验证混为一谈。</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">StrictHostnameVerifier</code>:</strong> 严格的主机名验证方法和java 1.4,1.5,1.6验证方法相同。和IE6的方式也大致相同。这种验证方式符合RFC 2818通配符。The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts.</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BrowserCompatHostnameVerifier</code>:</strong> 这种验证主机名的方法，和Curl及firefox一致。The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts.<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">StrictHostnameVerifier</code>和<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BrowserCompatHostnameVerifier</code>方式唯一不同的地方就是，带有通配符的域名（比如*.civoz.com),<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BrowserCompatHostnameVerifier</code>方式在匹配时会匹配所有的的子域名，包括 a.b.civoz.com .</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AllowAllHostnameVerifier</code>:</strong> 这种方式不对主机名进行验证，验证功能被关闭，是个空操作，所以它不会抛出<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">javax.net.ssl.SSLException</code>异常。HttpClient默认使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BrowserCompatHostnameVerifier</code>的验证方式。如果需要，我们可以手动执行验证方式。
<pre style="border:0px;font-family:&apos;Courier 10 Pitch&apos;, Courier, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0.75em 1.625em;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:1.5;margin-bottom:1.625em;overflow:auto;background:rgb(228, 228, 228);"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SSLContext sslContext = SSLContexts.createSystemDefault();
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
        sslContext,
        SSLConnectionSocketFactory.STRICT_HOSTNAME_VERIFIER);
</code></pre></li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HttpClient-proxy-configuration" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">2.8.HttpClient代理服务器配置</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">尽管，HttpClient支持复杂的路由方案和代理链，它同样也支持直接连接或者只通过一跳的连接。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">使用代理服务器最简单的方式就是，指定一个默认的proxy参数。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpHost proxy = new HttpHost(&quot;someproxy&quot;, 8080);
    DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
    CloseableHttpClient httpclient = HttpClients.custom()
            .setRoutePlanner(routePlanner)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">我们也可以让HttpClient去使用jre的代理服务器。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    SystemDefaultRoutePlanner routePlanner = new SystemDefaultRoutePlanner(
        ProxySelector.getDefault());
    CloseableHttpClient httpclient = HttpClients.custom()
            .setRoutePlanner(routePlanner)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">又或者，我们也可以手动配置<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">RoutePlanner</code>，这样就可以完全控制Http路由的过程。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HttpRoutePlanner routePlanner = new HttpRoutePlanner() {

        public HttpRoute determineRoute(
                HttpHost target,
                HttpRequest request,
                HttpContext context) throws HttpException {
            return new HttpRoute(target, null,  new HttpHost(&quot;someproxy&quot;, 8080),
                    &quot;https&quot;.equalsIgnoreCase(target.getSchemeName()));
        }

    };
    CloseableHttpClient httpclient = HttpClients.custom()
            .setRoutePlanner(routePlanner)
            .build();
        }
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"> </p></div></div></div></div></div></div></div></div></div><div><table bgcolor="#D4DDE5" border="0" width="100%"><tbody><tr><td><h1 id="HTTP-status-manage">HttpClient4.3教程 第三章.HTTP状态管理</h1></td></tr></tbody></table></div><div style="font-size: 16px"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: Arial, sans-serif; font-size: 15px; font-style: normal; outline: 0px; vertical-align: baseline; line-height: 1.575; background-color: rgb(249, 249, 249); color: rgb(55, 55, 55); font-variant: normal;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; overflow: hidden;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="-webkit-box-shadow: rgb(187, 187, 187) 0px 0px 5px; box-shadow: rgb(187, 187, 187) 0px 0px 5px; background-color: rgb(252, 252, 252);"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; word-wrap: break-word;"><div><br/></div><div>最初，Http被设计成一个无状态的，面向请求/响应的协议，所以它不能在逻辑相关的http请求/响应中保持状态会话。由于越来越多的系统使用http协议，其中包括http从来没有想支持的系统，比如电子商务系统。因此，http支持状态管理就很必要了。</div><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">当时的web客户端和服务器软件领先者，网景(netscape)公司，最先在他们的产品中支持http状态管理，并且制定了一些专有规范。后来，网景通过发规范草案，规范了这一机制。这些努力促成 RFC standard track制定了标准的规范。但是，现在多数的应用的状态管理机制都在使用网景公司的规范，而网景的规范和官方规定是不兼容的。因此所有的浏览器开发这都被迫兼容这两种协议，从而导致协议的不统一。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-cookies" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">3.1.Http cookies</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">所谓的Http cookie就是一个token或者很短的报文信息，http代理和服务器可以通过cookie来维持会话状态。网景的工程师把它们称作“magic cookie”。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Cookie</code>接口来代表cookie。简单说来，cookie就是一个键值对。一般，cookie也会包含版本号、域名、路径和cookie有效期。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SetCookie</code>接口可以代表服务器发给http代理的一个set-cookie响应头，在浏览器中，这个set-cookie响应头可以写入cookie，以便保持会话状态。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SetCookie2</code>接口对<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SetCookie</code>接口进行了拓展，添加了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Set-Cookie2</code>方法。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">ClientCookie</code>接口继承了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Cookie</code>接口，并进行了功能拓展，比如它可以取出服务器发送过来的原始cookie的值。生成头消息是很重要的，因为只有当cookie被指定为<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Set-Cookie</code>或者<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Set-Cookie2</code>时，它才需要包括一些特定的属性。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Cookie-versions" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">3.1.1Cookies版本</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">兼容网景的规范，但是不兼容官方规范的cookie，是版本0. 兼容官方规范的版本，将会是版本1。版本1中的Cookie可能和版本0工作机制有差异。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面的代码，创建了网景版本的Cookie：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    BasicClientCookie netscapeCookie = new BasicClientCookie(&quot;name&quot;, &quot;value&quot;);
    netscapeCookie.setVersion(0);
    netscapeCookie.setDomain(&quot;.civoz.com&quot;);
    netscapeCookie.setPath(&quot;/&quot;);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面的代码，创建标准版本的Cookie。注意，标准版本的Cookie必须保留服务器发送过来的Cookie所有属性。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    BasicClientCookie stdCookie = new BasicClientCookie(&quot;name&quot;, &quot;value&quot;);
    stdCookie.setVersion(1);
    stdCookie.setDomain(&quot;.civoz.com&quot;);
    stdCookie.setPath(&quot;/&quot;);
    stdCookie.setSecure(true);
    // Set attributes EXACTLY as sent by the server 
    stdCookie.setAttribute(ClientCookie.VERSION_ATTR, &quot;1&quot;);
    stdCookie.setAttribute(ClientCookie.DOMAIN_ATTR, &quot;.civoz.com&quot;);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面的代码，创建了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Set-Cookie2</code>兼容cookie。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    BasicClientCookie2 stdCookie = new BasicClientCookie2(&quot;name&quot;, &quot;value&quot;);
    stdCookie.setVersion(1);
    stdCookie.setDomain(&quot;.civoz.com&quot;);
    stdCookie.setPorts(new int[] {80,8080});
    stdCookie.setPath(&quot;/&quot;);
    stdCookie.setSecure(true);
    // Set attributes EXACTLY as sent by the server 
    stdCookie.setAttribute(ClientCookie.VERSION_ATTR, &quot;1&quot;);
    stdCookie.setAttribute(ClientCookie.DOMAIN_ATTR, &quot;.civoz.com&quot;);
    stdCookie.setAttribute(ClientCookie.PORT_ATTR, &quot;80,8080&quot;);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Cookie-specifications" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">3.2. Cookie规范</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieSpec</code>接口代表了Cookie管理规范。Cookie管理规范规定了：</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">解析<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Set-Cookie</code>和<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Set-Cookie2</code>(可选）头消息的规则</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">验证Cookie的规则</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">将指定的主机名、端口和路径格式化成Cookie头消息</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient有下面几种<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieSpec</code>规范：</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">Netscape draft:</strong> 这种符合网景公司指定的规范。但是尽量不要使用，除非一定要保证兼容很旧的代码。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">Standard:</strong> RFC 2965 HTTP状态管理规范</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">Browser compatibility:</strong> 这种方式，尽量模仿常用的浏览器，如IE和firefox</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">Best match:</strong> ‘Meta’ cookie specification that picks up a cookie policy based on the format of cookies sent with the HTTP response.它基本上将上面的几种规范积聚到一个类中。<br/>
++ <strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">Ignore cookies:</strong> 忽略所有Cookie<br/>
强烈推荐使用<strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">Best Match</strong>匹配规则，让HttpClient根据运行时环境自己选择合适的规范。</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Choosing-cookie-policy" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">3.3.选择Cookie策略</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">我们可以在创建Http client的时候指定Cookie测试，如果需要，也可以在执行http请求的时候，进行覆盖指定。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    RequestConfig globalConfig = RequestConfig.custom()
            .setCookieSpec(CookieSpecs.BEST_MATCH)
            .build();
    CloseableHttpClient httpclient = HttpClients.custom()
            .setDefaultRequestConfig(globalConfig)
            .build();
    RequestConfig localConfig = RequestConfig.copy(globalConfig)
            .setCookieSpec(CookieSpecs.BROWSER_COMPATIBILITY)
            .build();
    HttpGet httpGet = new HttpGet(&quot;http://www.civoz.com&quot;);
    httpGet.setConfig(localConfig);
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Custom-cookie-policy" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">3.4.自定义Cookie策略</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">如果我们要自定义Cookie测试，就要自己实现<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieSpec</code>接口，然后创建一个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieSpecProvider</code>接口来新建、初始化自定义<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieSpec</code>接口，最后把<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieSpecProvider</code>注册到HttpClient中。一旦我们注册了自定义策略，就可以像其他标准策略一样使用了。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CookieSpecProvider easySpecProvider = new CookieSpecProvider() {

        public CookieSpec create(HttpContext context) {

            return new BrowserCompatSpec() {
                @Override
                public void validate(Cookie cookie, CookieOrigin origin)
                        throws MalformedCookieException {
                    // Oh, I am easy
                }
            };
        }

    };
    Registry&lt;CookieSpecProvider&gt; r = RegistryBuilder.&lt;CookieSpecProvider&gt;create()
            .register(CookieSpecs.BEST_MATCH,
                new BestMatchSpecFactory())
            .register(CookieSpecs.BROWSER_COMPATIBILITY,
                new BrowserCompatSpecFactory())
            .register(&quot;easy&quot;, easySpecProvider)
            .build();

    RequestConfig requestConfig = RequestConfig.custom()
            .setCookieSpec(&quot;easy&quot;)
            .build();

    CloseableHttpClient httpclient = HttpClients.custom()
            .setDefaultCookieSpecRegistry(r)
            .setDefaultRequestConfig(requestConfig)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Cookie-persistence" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">3.5.Cookie持久化</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient可以使用任何存储方式的cookie store，只要这个cookie store实现了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieStore</code>接口。默认的CookieStore通过<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.util.ArrayList</code>简单实现了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BasicCookieStore</code>。存在在<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BasicCookieStore</code>中的Cookie，当载体对象被当做垃圾回收掉后，就会丢失。如果必要，用户可以自己实现更为复杂的方式。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    // 创建CookieStore实例
    CookieStore cookieStore = new BasicCookieStore();
    // 新建一个Cookie
    BasicClientCookie cookie = new BasicClientCookie(&quot;name&quot;, &quot;value&quot;);
    cookie.setVersion(0);
    cookie.setDomain(&quot;.mycompany.com&quot;);
    cookie.setPath(&quot;/&quot;);
    cookieStore.addCoo
    //将CookieStore设置到httpClient中
    CloseableHttpClient httpclient = HttpClients.custom()
            .setDefaultCookieStore(cookieStore)
            .build();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-state-management-and-execution-context" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">3.6.HTTP状态管理和执行上下文</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">在Http请求执行过程中，HttpClient会自动向执行上下文中添加下面的状态管理对象：</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Lookup</code>对象 代表实际的cookie规范registry。在当前上下文中的这个值优先于默认值。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieSpec</code>对象 代表实际的Cookie规范。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieOrigin</code>对象 代表实际的origin server的详细信息。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CookieStore</code>对象 表示Cookie store。这个属性集中的值会取代默认值。</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">本地的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpContext</code>对象可以用来在Http请求执行前，自定义Http状态管理上下文;或者测试http请求执行完毕后上下文的状态。我们也可以在不同的线程中使用不同的执行上下文。我们在http请求层指定的cookie规范集和cookie store会覆盖在http Client层级的默认值。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = &lt;...&gt;

    Lookup&lt;CookieSpecProvider&gt; cookieSpecReg = &lt;...&gt;
    CookieStore cookieStore = &lt;...&gt;

    HttpClientContext context = HttpClientContext.create();
    context.setCookieSpecRegistry(cookieSpecReg);
    context.setCookieStore(cookieStore);
    HttpGet httpget = new HttpGet(&quot;http://somehost/&quot;);
    CloseableHttpResponse response1 = httpclient.execute(httpget, context);
    &lt;...&gt;
    // Cookie origin details
    CookieOrigin cookieOrigin = context.getCookieOrigin();
    // Cookie spec used
    CookieSpec cookieSpec = context.getCookieSpec();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><br/></p></div></div></div></div></div></div></div></div></div><div><table bgcolor="#D4DDE5" border="0" width="100%"><tbody><tr><td><h1 id="HTTP-authentication">HttpClient4.3教程 第四章.HTTP认证</h1></td></tr></tbody></table></div><div style="font-size: 16px"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: Arial, sans-serif; font-size: 15px; font-style: normal; outline: 0px; vertical-align: baseline; line-height: 1.575; background-color: rgb(249, 249, 249); color: rgb(55, 55, 55); font-variant: normal;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; overflow: hidden;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="-webkit-box-shadow: rgb(187, 187, 187) 0px 0px 5px; box-shadow: rgb(187, 187, 187) 0px 0px 5px; background-color: rgb(252, 252, 252);"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; word-wrap: break-word;"><div><br/></div><div>HttpClient既支持HTTP标准规范定义的认证模式，又支持一些广泛使用的非标准认证模式，比如NTLM和SPNEGO。</div><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="User-credentials" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">4.1.用户凭证</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">任何用户认证的过程，都需要一系列的凭证来确定用户的身份。最简单的用户凭证可以是用户名和密码这种形式。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">UsernamePasswordCredentials</code>这个类可以用来表示这种情况，这种凭据包含明文的用户名和密码。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">这个类对于HTTP标准规范中定义的认证模式来说已经足够了。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    UsernamePasswordCredentials creds = new UsernamePasswordCredentials(&quot;user&quot;, &quot;pwd&quot;);
    System.out.println(creds.getUserPrincipal().getName());
    System.out.println(creds.getPassword());
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上述代码会在控制台输出：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    user
    pwd
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">NTCredentials</code>是微软的windows系统使用的一种凭据，包含username、password，还包括一系列其他的属性，比如用户所在的域名。在Microsoft Windows的网络环境中，同一个用户可以属于不同的域，所以他也就有不同的凭据。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    NTCredentials creds = new NTCredentials(&quot;user&quot;, &quot;pwd&quot;, &quot;workstation&quot;, &quot;domain&quot;);
    System.out.println(creds.getUserPrincipal().getName());
    System.out.println(creds.getPassword());
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上述代码输出：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    DOMAIN/user
    pwd
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Authentication-schemes" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">4.2. 认证方案</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AutoScheme</code>接口表示一个抽象的面向挑战/响应的认证方案。一个认证方案要支持下面的功能：</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">客户端请求服务器受保护的资源，服务器会发送过来一个chanllenge(挑战），认证方案（Authentication scheme）需要解析、处理这个挑战</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">为processed challenge提供一些属性值：认证方案的类型，和此方案需要的一些参数，这种方案适用的范围</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">使用给定的授权信息生成授权字符串;生成http请求，用来响应服务器发送来过的授权challenge</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">请注意：一个认证方案可能是有状态的，因为它可能涉及到一系列的挑战/响应。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient实现了下面几种<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AutoScheme</code>:</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">Basic:</strong> Basic认证方案是在RFC2617号文档中定义的。这种授权方案用明文来传输凭证信息，所以它是不安全的。虽然Basic认证方案本身是不安全的，但是它一旦和TLS/SSL加密技术结合起来使用，就完全足够了。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">Digest:</strong> Digest（摘要）认证方案是在RFC2617号文档中定义的。Digest认证方案比Basic方案安全多了，对于那些受不了Basic+TLS/SSL传输开销的系统，digest方案是个不错的选择。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">NTLM:</strong> NTLM认证方案是个专有的认证方案，由微软开发，并且针对windows平台做了优化。NTLM被认为比Digest更安全。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><strong style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:bold;margin:0px;outline:0px;padding:0px;vertical-align:baseline;">SPNEGO:</strong> SPNEGO(Simple and Protected GSSAPI Negotiation Mechanism)是GSSAPI的一个“伪机制”，它用来协商真正的认证机制。SPNEGO最明显的用途是在微软的HTTP协商认证机制拓展上。可协商的子机制包括NTLM、Kerberos。目前，HttpCLient只支持Kerberos机制。（原文：The negotiable sub-mechanisms include NTLM and Kerberos supported by Active Directory. At present HttpClient only supports the Kerberos sub-mechanism.）</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Credentials-provider" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">4.3. 凭证 provider</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">凭证providers旨在维护一套用户的凭证，当需要某种特定的凭证时，providers就应该能产生这种凭证。认证的具体内容包括主机名、端口号、realm name和认证方案名。当使用凭据provider的时候，我们可以很模糊的指定主机名、端口号、realm和认证方案，不用写的很精确。因为，凭据provider会根据我们指定的内容，筛选出一个最匹配的方案。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">只要我们自定义的凭据provider实现了<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CredentialsProvider</code>这个接口，就可以在HttpClient中使用。默认的凭据provider叫做<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">BasicCredentialsProvider</code>，它使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.util.HashMap</code>对<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CredentialsProvider</code>进行了简单的实现。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CredentialsProvider credsProvider = new BasicCredentialsProvider();
    credsProvider.setCredentials(
        new AuthScope(&quot;somehost&quot;, AuthScope.ANY_PORT), 
        new UsernamePasswordCredentials(&quot;u1&quot;, &quot;p1&quot;));
    credsProvider.setCredentials(
        new AuthScope(&quot;somehost&quot;, 8080), 
        new UsernamePasswordCredentials(&quot;u2&quot;, &quot;p2&quot;));
    credsProvider.setCredentials(
        new AuthScope(&quot;otherhost&quot;, 8080, AuthScope.ANY_REALM, &quot;ntlm&quot;), 
        new UsernamePasswordCredentials(&quot;u3&quot;, &quot;p3&quot;));

    System.out.println(credsProvider.getCredentials(
        new AuthScope(&quot;somehost&quot;, 80, &quot;realm&quot;, &quot;basic&quot;)));
    System.out.println(credsProvider.getCredentials(
        new AuthScope(&quot;somehost&quot;, 8080, &quot;realm&quot;, &quot;basic&quot;)));
    System.out.println(credsProvider.getCredentials(
        new AuthScope(&quot;otherhost&quot;, 8080, &quot;realm&quot;, &quot;basic&quot;)));
    System.out.println(credsProvider.getCredentials(
        new AuthScope(&quot;otherhost&quot;, 8080, null, &quot;ntlm&quot;)));
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">上面代码输出：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    [principal: u1]
    [principal: u2]
    null
    [principal: u3]
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="HTTP-authentication-and-execution-context" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">4.4.HTTP授权和执行上下文</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient依赖<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AuthState</code>类去跟踪认证过程中的状态的详细信息。在Http请求过程中，HttpClient创建两个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AuthState</code>实例：一个用于目标服务器认证，一个用于代理服务器认证。如果服务器或者代理服务器需要用户的授权信息，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AuthScope</code>、<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AutoScheme</code>和认证信息就会被填充到两个<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AuthScope</code>实例中。通过对<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AutoState</code>的检测，我们可以确定请求的授权类型，确定是否有匹配的<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AuthScheme</code>，确定凭据provider根据指定的授权类型是否成功生成了用户的授权信息。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">在Http请求执行过程中，HttpClient会向执行上下文中添加下面的授权对象：</p><ul style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em 2.5em; outline: 0px; padding: 0px; vertical-align: baseline; list-style: none;"><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Lookup</code>对象，表示使用的认证方案。这个对象的值可以在本地上下文中进行设置，来覆盖默认值。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">CredentialsProvider</code>对象，表示认证方案provider，这个对象的值可以在本地上下文中进行设置，来覆盖默认值。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AuthState</code>对象，表示目标服务器的认证状态，这个对象的值可以在本地上下文中进行设置，来覆盖默认值。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AuthState</code>对象，表示代理服务器的认证状态，这个对象的值可以在本地上下文中进行设置，来覆盖默认值。</li><li style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">AuthCache</code>对象，表示认证数据的缓存，这个对象的值可以在本地上下文中进行设置，来覆盖默认值。</li></ul><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">我们可以在请求执行前，自定义本地<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpContext</code>对象来设置需要的http认证上下文;也可以在请求执行后，再检测<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">HttpContext</code>的状态，来查看授权是否成功。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = &lt;...&gt;

    CredentialsProvider credsProvider = &lt;...&gt;
    Lookup&lt;AuthSchemeProvider&gt; authRegistry = &lt;...&gt;
    AuthCache authCache = &lt;...&gt;

    HttpClientContext context = HttpClientContext.create();
    context.setCredentialsProvider(credsProvider);
    context.setAuthSchemeRegistry(authRegistry);
    context.setAuthCache(authCache);
    HttpGet httpget = new HttpGet(&quot;http://www.civoz.com/&quot;);
    CloseableHttpResponse response1 = httpclient.execute(httpget, context);
    &lt;...&gt;

    AuthState proxyAuthState = context.getProxyAuthState();
    System.out.println(&quot;Proxy auth state: &quot; + proxyAuthState.getState());
    System.out.println(&quot;Proxy auth scheme: &quot; + proxyAuthState.getAuthScheme());
    System.out.println(&quot;Proxy auth credentials: &quot; + proxyAuthState.getCredentials());
    AuthState targetAuthState = context.getTargetAuthState();
    System.out.println(&quot;Target auth state: &quot; + targetAuthState.getState());
    System.out.println(&quot;Target auth scheme: &quot; + targetAuthState.getAuthScheme());
    System.out.println(&quot;Target auth credentials: &quot; + targetAuthState.getCredentials());
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Caching-of-authentication-data" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">4.5. 缓存认证数据</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">从版本4.1开始，HttpClient就会自动缓存验证通过的认证信息。但是为了使用这个缓存的认证信息，我们必须在同一个上下文中执行逻辑相关的请求。一旦超出该上下文的作用范围，缓存的认证信息就会失效。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Preemptive-authentication" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">4.6. 抢先认证</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient默认不支持抢先认证，因为一旦抢先认证被误用或者错用，会导致一系列的安全问题，比如会把用户的认证信息以明文的方式发送给未授权的第三方服务器。因此，需要用户自己根据自己应用的具体环境来评估抢先认证带来的好处和带来的风险。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">即使如此，HttpClient还是允许我们通过配置来启用抢先认证，方法是提前填充认证信息缓存到上下文中，这样，以这个上下文执行的方法，就会使用抢先认证。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = &lt;...&gt;

    HttpHost targetHost = new HttpHost(&quot;localhost&quot;, 80, &quot;http&quot;);
    CredentialsProvider credsProvider = new BasicCredentialsProvider();
    credsProvider.setCredentials(
            new AuthScope(targetHost.getHostName(), targetHost.getPort()),
            new UsernamePasswordCredentials(&quot;username&quot;, &quot;password&quot;));

    // 创建 AuthCache 对象
    AuthCache authCache = new BasicAuthCache();
    //创建 BasicScheme，并把它添加到 auth cache中
    BasicScheme basicAuth = new BasicScheme();
    authCache.put(targetHost, basicAuth);

    // 把AutoCache添加到上下文中
    HttpClientContext context = HttpClientContext.create();
    context.setCredentialsProvider(credsProvider);

    HttpGet httpget = new HttpGet(&quot;/&quot;);
    for (int i = 0; i &lt; 3; i++) {
        CloseableHttpResponse response = httpclient.execute(
                targetHost, httpget, context);
        try {
            HttpEntity entity = response.getEntity();

        } finally {
            response.close();
        }
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="NTLM-Authentication" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">4.7. NTLM认证</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">从版本4.1开始，HttpClient就全面支持NTLMv1、NTLMv2和NTLM2认证。当人我们可以仍旧使用外部的NTLM引擎（比如Samba开发的JCIFS库）作为与Windows互操作性程序的一部分。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="NTLM-connection-persistence" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">4.7.1. NTLM连接持久性</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">相比<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Basic</code>和<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">Digest</code>认证，NTLM认证要明显需要更多的计算开销，性能影响也比较大。这也可能是微软把NTLM协议设计成有状态连接的主要原因之一。也就是说，NTLM连接一旦建立，用户的身份就会在其整个生命周期和它相关联。NTLM连接的状态性使得连接持久性更加复杂，The stateful nature of NTLM connections makes connection persistence more complex, as for the obvious reason persistent NTLM connections may not be re-used by users with a different user identity. HttpClient中标准的连接管理器就可以管理有状态的连接。但是，同一会话中逻辑相关的请求，必须使用相同的执行上下文，这样才能使用用户的身份信息。否则，HttpClient就会结束旧的连接，为了获取被NTLM协议保护的资源，而为每个HTTP请求，创建一个新的Http连接。更新关于Http状态连接的信息，点击<a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/advanced.html#stateful_conn" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">此处</a>。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">由于NTLM连接是有状态的，一般推荐使用比较轻量级的方法来处罚NTLM认证（如GET、Head方法），然后使用这个已经建立的连接在执行相对重量级的方法，尤其是需要附件请求实体的请求（如POST、PUT请求）。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    CloseableHttpClient httpclient = &lt;...&gt;

    CredentialsProvider credsProvider = new BasicCredentialsProvider();
    credsProvider.setCredentials(AuthScope.ANY,
            new NTCredentials(&quot;user&quot;, &quot;pwd&quot;, &quot;myworkstation&quot;, &quot;microsoft.com&quot;));

    HttpHost target = new HttpHost(&quot;www.microsoft.com&quot;, 80, &quot;http&quot;);

    //使用相同的上下文来执行逻辑相关的请求
    HttpClientContext context = HttpClientContext.create();
    context.setCredentialsProvider(credsProvider);

    //使用轻量级的请求来触发NTLM认证
    HttpGet httpget = new HttpGet(&quot;/ntlm-protected/info&quot;);
    CloseableHttpResponse response1 = httpclient.execute(target, httpget, context);
    try {
        HttpEntity entity1 = response1.getEntity();
    } finally {
        response1.close();
    }

    //使用相同的上下文，执行重量级的方法
    HttpPost httppost = new HttpPost(&quot;/ntlm-protected/form&quot;);
    httppost.setEntity(new StringEntity(&quot;lots and lots of data&quot;));
    CloseableHttpResponse response2 = httpclient.execute(target, httppost, context);
    try {
        HttpEntity entity2 = response2.getEntity();
    } finally {
        response2.close();
    }
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="SPNEGO-Kerberos-Authentication" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">4.8. SPNEGO/Kerberos认证</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">SPNEGO(Simple and Protected GSSAPI Megotiation Mechanism），当双方均不知道对方能使用/提供什么协议的情况下，可以使用SP认证协议。这种协议在Kerberos认证方案中经常使用。It can wrap other mechanisms, however the current version in HttpClient is designed solely with Kerberos in mind.</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="SPNEGO-support-in-HttpClient" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">4.8.1. 在HttpCient中使用SPNEGO</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">SPNEGO认证方案兼容Sun java 1.5及以上版本。但是强烈推荐jdk1.6以上。Sun的JRE提供的类就已经几乎完全可以处理Kerberos和SPNEGO token。这就意味着，需要设置很多的GSS类。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">SpnegoScheme</code>是个很简单的类，可以用它来handle marshalling the tokens and 读写正确的头消息。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">最好的开始方法就是从示例程序中找到<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">KerberosHttpClient.java</code>这个文件，尝试让它运行起来。运行过程有可能会出现很多问题，但是如果人品比较高可能会顺利一点。这个文件会提供一些输出，来帮我们调试。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">在Windows系统中，应该默认使用用户的登陆凭据;当然我们也可以使用<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">kinit</code>来覆盖这个凭据，比如<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">$JAVA_HOME\bin\kinit testuser@AD.EXAMPLE.NET</code>，这在我们测试和调试的时候就显得很有用了。如果想用回Windows默认的登陆凭据，删除kinit创建的缓存文件即可。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">确保在krb5.conf文件中列出<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">domain_realms</code>。这能解决很多不必要的问题。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="GSS-Java-Kerberos-Setup" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">4.8.2. 使用GSS/Java Kerberos</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面的这份文档是针对Windows系统的，但是很多信息同样适合Unix。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">org.ietf.jgss</code>这个类有很多的配置参数，这些参数大部分都在<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">krb5.conf/krb5.ini</code>文件中配置。更多的信息，参考<a href="http://web.mit.edu/kerberos/krb5-1.4/krb5-1.4.1/doc/krb5-admin/krb5.conf.html." style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;">此处</a>。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="login.conf-file" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h4 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both;">login.conf文件</h4><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面是一个基本的login.conf文件，使用于Windows平台的IIS和JBoss Negotiation模块。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">系统配置文件<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.security.auth.login.config</code>可以指定<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">login.conf</code>文件的路径。<br/><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">login.conf</code>的内容可能会是下面的样子：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    com.sun.security.jgss.login {
      com.sun.security.auth.module.Krb5LoginModule required client=TRUE useTicketCache=true;
    };

    com.sun.security.jgss.initiate {
      com.sun.security.auth.module.Krb5LoginModule required client=TRUE useTicketCache=true;
    };

    com.sun.security.jgss.accept {
      com.sun.security.auth.module.Krb5LoginModule required client=TRUE useTicketCache=true;
    };
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="krb5.conf-krb5.ini-file" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">4.8.4. krb5.conf / krb5.ini 文件</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">如果没有手动指定，系统会使用默认配置。如果要手动指定，可以在<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">java.security.krb5.conf</code>中设置系统变量，指定<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">krb5.conf</code>的路径。<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">krb5.conf</code>的内容可能是下面的样子：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    [libdefaults]
        default_realm = AD.EXAMPLE.NET
        udp_preference_limit = 1
    [realms]
        AD.EXAMPLE.NET = {
            kdc = KDC.AD.EXAMPLE.NET
        }
    [domain_realms]
    .ad.example.net=AD.EXAMPLE.NET
    ad.example.net=AD.EXAMPLE.NET
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Windows-Specific-configuration" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h3 style="border: 0px; font-family: inherit; font-size: 10px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; letter-spacing: 0.1em; line-height: 2.6em; text-transform: uppercase;">4.8.5. Windows详细的配置</h3><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">为了允许Windows使用当前用户的tickets，<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">javax.security.auth.useSubjectCredsOnly</code>这个系统变量应该设置成<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">false</code>，并且需要在Windows注册表中添加<code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">allowtgtsessionkey</code>这个项，而且要allow session keys to be sent in the Kerberos Ticket-Granting Ticket.</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Windows Server 2003和Windows 2000 SP4,配置如下：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters
    Value Name: allowtgtsessionkey
    Value Type: REG_DWORD
    Value: 0x01
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">Windows XP SP2 配置如下：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\Kerberos\
    Value Name: allowtgtsessionkey
    Value Type: REG_DWORD
    Value: 0x01
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"> </p></div></div></div></div></div></div></div></div></div><div><table bgcolor="#D4DDE5" border="0" width="100%"><tbody><tr><td><h1 id="Easy-API">HttpClient4.3教程 第五章.快速API</h1></td></tr></tbody></table></div><div style="font-size: 16px"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: Arial, sans-serif; font-size: 15px; font-style: normal; outline: 0px; vertical-align: baseline; line-height: 1.575; background-color: rgb(249, 249, 249); color: rgb(55, 55, 55); font-variant: normal;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; overflow: hidden;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline;"><div style="-webkit-box-shadow: rgb(187, 187, 187) 0px 0px 5px; box-shadow: rgb(187, 187, 187) 0px 0px 5px; background-color: rgb(252, 252, 252);"><div style="font-family: inherit; font-size: 100%; font-style: inherit; outline: 0px; vertical-align: baseline; word-wrap: break-word;"><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);"><br/></h2><h2 id="Easy-to-use-facade-API" style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">5.1.Easy to use facade API</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">HttpClient从4.2开始支持快速api。快速api仅仅实现了HttpClient的基本功能，它只要用于一些不需要灵活性的简单场景。例如，快速api不需要用户处理连接管理和资源释放。</p><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">下面是几个使用快速api的例子：</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    // 执行一个get方法，设置超时时间，并且将结果变成字符串
    Request.Get(&quot;http://www.civoz.com/&quot;)
            .connectTimeout(1000)
            .socketTimeout(1000)
            .execute().returnContent().asString();

    // 使用HTTP/1.1,通过'expect-continue' handshake来执行post方法
    // 内容包含一个字符串，并且将结果转化成byte数组
    Request.Post(&quot;http://www.civoz.com/do-stuff&quot;)
        .useExpectContinue()
        .version(HttpVersion.HTTP_1_1)
        .bodyString(&quot;Important stuff&quot;, ContentType.DEFAULT_TEXT)
        .execute().returnContent().asBytes();

    // 通过代理服务器来执行一个带有特殊header的post请求，post请求中带有form表单，并且将返回结果写入文件
    Request.Post(&quot;http://www.civoz.com/some-form&quot;)
            .addHeader(&quot;X-Custom-header&quot;, &quot;stuff&quot;)
            .viaProxy(new HttpHost(&quot;myproxy&quot;, 8080))
            .bodyForm(Form.form().add(&quot;username&quot;, &quot;vip&quot;).add(&quot;password&quot;, &quot;secret&quot;).build())
            .execute().saveContent(new File(&quot;result.dump&quot;));
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">如果需要在指定的安全上下文中执行某些请求，我们也可以直接使用Exector，这时候用户的认证信息就会被缓存起来，以便后续的请求使用。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    Executor executor = Executor.newInstance()
            .auth(new HttpHost(&quot;somehost&quot;), &quot;username&quot;, &quot;password&quot;)
            .auth(new HttpHost(&quot;myproxy&quot;, 8080), &quot;username&quot;, &quot;password&quot;)
            .authPreemptive(new HttpHost(&quot;myproxy&quot;, 8080));

    executor.execute(Request.Get(&quot;http://somehost/&quot;))
            .returnContent().asString();

    executor.execute(Request.Post(&quot;http://somehost/do-stuff&quot;)
            .useExpectContinue()
            .bodyString(&quot;Important stuff&quot;, ContentType.DEFAULT_TEXT))
            .returnContent().asString();
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"><a name="Response-handling" style="border:0px;font-family:inherit;font-size:100%;font-style:inherit;font-weight:inherit;margin:0px;outline:0px;padding:0px;vertical-align:baseline;color:rgb(25, 130, 209);text-decoration:none;"></a></p><h2 style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: bold; margin: 0px 0px 0.8125em; outline: 0px; padding: 0px; vertical-align: baseline; clear: both; color: rgb(0, 0, 0);">5.1.1.响应处理</h2><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;">一般情况下，HttpClient的快速api不用用户处理连接管理和资源释放。但是，这样的话，就必须在内存中缓存这些响应消息。为了避免这一情况，建议使用使用ResponseHandler来处理Http响应。</p><pre style="border: 0px; font-family: &apos;Courier 10 Pitch&apos;, Courier, monospace; font-size: 13px; font-style: normal; font-weight: normal; margin: 0px 0px 1.625em; outline: 0px; padding: 0.75em 1.625em; vertical-align: baseline; font-variant: normal; line-height: 1.5; overflow: auto; background-color: rgb(228, 228, 228); background-position: initial initial; background-repeat: initial initial;"><code style="border:0px;font-family:Monaco, Consolas, &apos;Andale Mono&apos;, &apos;DejaVu Sans Mono&apos;, monospace;font-size:13px;font-style:normal;font-weight:normal;margin:0px;outline:0px;padding:0px;vertical-align:baseline;font-variant:normal;font-stretch:normal;line-height:normal;">    Document result = Request.Get(&quot;http://somehost/content&quot;)
            .execute().handleResponse(new ResponseHandler&lt;Document&gt;() {

        public Document handleResponse(final HttpResponse response) throws IOException {
            StatusLine statusLine = response.getStatusLine();
            HttpEntity entity = response.getEntity();
            if (statusLine.getStatusCode() &gt;= 300) {
                throw new HttpResponseException(
                        statusLine.getStatusCode(),
                        statusLine.getReasonPhrase());
            }
            if (entity == null) {
                throw new ClientProtocolException(&quot;Response contains no content&quot;);
            }
            DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();
            try {
                DocumentBuilder docBuilder = dbfac.newDocumentBuilder();
                ContentType contentType = ContentType.getOrDefault(entity);
                if (!contentType.equals(ContentType.APPLICATION_XML)) {
                    throw new ClientProtocolException(&quot;Unexpected content type:&quot; +
                        contentType);
                }
                String charset = contentType.getCharset();
                if (charset == null) {
                    charset = HTTP.DEFAULT_CONTENT_CHARSET;
                }
                return docBuilder.parse(entity.getContent(), charset);
            } catch (ParserConfigurationException ex) {
                throw new IllegalStateException(ex);
            } catch (SAXException ex) {
                throw new ClientProtocolException(&quot;Malformed XML document&quot;, ex);
            }
        }

        });
</code></pre><p style="border: 0px; font-family: inherit; font-size: 100%; font-style: inherit; font-weight: inherit; margin: 0px 0px 1.625em; outline: 0px; padding: 0px; vertical-align: baseline;"> </p></div></div></div></div></div></div></div></div></div><br/></div></span>
</div></body></html> 